________________[./utils/sqlite.py CAT SCRIPT]_______________

import sqlite3
from typing import List, Dict

class ReportDatabase:
    def __init__(self, db_name: str = None):
        self.conn = None
        self.cursor = None
        if db_name:
            self.load_database(db_name)

    def load_database(self, db_name: str):
        """Loads an existing database"""
        self.conn = sqlite3.connect(db_name)
        self.conn.row_factory = sqlite3.Row  # Enable dictionary-like row access
        self.cursor = self.conn.cursor()

    def create_database(self, db_name: str):
        """Creates a new database with the required schema"""
        self.conn = sqlite3.connect(db_name)
        self.conn.row_factory = sqlite3.Row
        self.cursor = self.conn.cursor()

        # Create the USER table
        self.cursor.execute("""
            CREATE TABLE IF NOT EXISTS USER (
                NIU TEXT PRIMARY KEY
            )
        """)

        # Create the TEAM table
        self.cursor.execute("""
            CREATE TABLE IF NOT EXISTS TEAM (
                team_name TEXT PRIMARY KEY,
                NIU TEXT,
                FOREIGN KEY (NIU) REFERENCES USER(NIU)
            )
        """)

        # Create the REPORT table
        self.cursor.execute("""
            CREATE TABLE IF NOT EXISTS REPORT (
                id_report INTEGER,
                team_name TEXT,
                reported_at TEXT,
                reported_from TEXT,
                total_error FLOAT,
                single_day_error FLOAT,
                five_days_error FLOAT,
                ten_days_error FLOAT,
                PRIMARY KEY (id_report, team_name),
                FOREIGN KEY (team_name) REFERENCES TEAM(team_name)
            )
        """)

        self.conn.commit()

    # -------------------- Data Insertion Methods --------------------
    def add_user(self, niu: str) -> str:
        """Add a user to the USER table. Return 'User exists' if the user already exists."""
        # Check if the user already exists
        query = "SELECT NIU FROM USER WHERE NIU = ?"
        self.cursor.execute(query, (niu,))
        user = self.cursor.fetchone()
        if user:
            return "User exists"

        # Insert new user if not exists
        query = "INSERT INTO USER (NIU) VALUES (?)"
        self.cursor.execute(query, (niu,))
        self.conn.commit()
        return "User added successfully"

    def add_team(self, team_name: str, niu: str) -> str:
        """Add a team to the TEAM table. Return 'Team exists' if the team already exists."""
        # Check if the team already exists
        query = "SELECT team_name FROM TEAM WHERE team_name = ?"
        self.cursor.execute(query, (team_name,))
        team = self.cursor.fetchone()
        if team:
            return "Team exists"

        # Insert new team if not exists
        query = "INSERT INTO TEAM (team_name, NIU) VALUES (?, ?)"
        self.cursor.execute(query, (team_name, niu))
        self.conn.commit()
        return "Team added successfully"

    def add_report(self, id_report: int, team_name: str, reported_at: str, reported_from: str, total_error: float = -.1,
                   five_days_error: float = -.1, ten_days_error: float = -.1):
        """Add a report to the REPORT table"""
        query = """
        INSERT INTO REPORT (id_report, team_name, reported_at, reported_from, total_error, five_days_error, ten_days_error)
        VALUES (?, ?, ?, ?, ?, ?, ?)
        """
        self.cursor.execute(query, (
        id_report, team_name, reported_at, reported_from, total_error, five_days_error, ten_days_error))
        self.conn.commit()

    # -------------------- Query Methods --------------------
    def find_teams_by_user(self, niu: str) -> List[Dict]:
        """Find all teams for a given user (NIU)"""
        query = """
        SELECT * FROM TEAM WHERE NIU = ?
        """
        self.cursor.execute(query, (niu,))
        teams = self.cursor.fetchall()
        return [dict(team) for team in teams]

    def find_reports_by_user(self, niu: str) -> List[Dict]:
        """Find all reports for teams that a user (NIU) belongs to"""
        query = """
        SELECT R.* FROM REPORT R
        INNER JOIN TEAM T ON R.team_name = T.team_name
        WHERE T.NIU = ?
        """
        self.cursor.execute(query, (niu,))
        reports = self.cursor.fetchall()
        return [dict(report) for report in reports]

    def get_all_reports(self) -> List[Dict]:
        """Return all submitted reports"""
        query = "SELECT * FROM REPORT"
        self.cursor.execute(query)
        reports = self.cursor.fetchall()
        return [dict(report) for report in reports]

    def close_connection(self):
        """Closes the database connection"""
        if self.conn:
            self.conn.close()


# -------------------- Testing the Database --------------------
if __name__ == '__main__':
    # Create the database instance and test it
    db = ReportDatabase()

    # Create a new database
    db.create_database('./test_reports.db')

    # Add some users
    print(db.add_user('user123'))  # Should add the user
    print(db.add_user('user123'))  # Should return 'User exists'
    print(db.add_user('user456'))  # Should add the user

    # Add some teams
    print(db.add_team('TeamA', 'user123'))  # Should add the team
    print(db.add_team('TeamA', 'user123'))  # Should return 'Team exists'
    print(db.add_team('TeamB', 'user123'))  # Should add the team
    print(db.add_team('TeamC', 'user456'))  # Should add the team

    # Add some reports
    db.add_report(1, 'TeamA', '2023-10-01', 'LocationA')
    db.add_report(2, 'TeamA', '2023-10-02', 'LocationB')
    db.add_report(3, 'TeamB', '2023-10-03', 'LocationC')
    db.add_report(4, 'TeamC', '2023-10-04', 'LocationD')

    # Test search methods

    # Find all teams for user 'user123'
    teams_user123 = db.find_teams_by_user('user123')
    print("Teams for user123:", teams_user123)

    # Find all reports for teams associated with 'user123'
    reports_user123 = db.find_reports_by_user('user123')
    print("Reports for user123:", reports_user123)

    # Find all reports in the database
    all_reports = db.get_all_reports()
    print("All reports:", all_reports)

    # Close the database connection
    db.close_connection()

-_________________[./utils/sqlite.py CAT SCRIPT]____________

________________[./utils/nxmanager.py CAT SCRIPT]_______________

import networkx as nx
import pandas as pd
import os
import copy
from tqdm import tqdm
import numpy as np

PATH_TO_GT = '../data_samples/'

SINGLE_DAY_GRAPH = 254
MISSING_GRAPHS = 11

class ErrorChecker:
    def __init__(self, csv_file_cases_reported = 'casos_gt_non_poisoned.csv'):
        graph = nx.read_graphml(os.path.join(PATH_TO_GT, 'graph.ml'))
        casos_diarios = pd.read_csv(os.path.join(PATH_TO_GT, csv_file_cases_reported))
        table = pd.read_csv(os.path.join(PATH_TO_GT, 'translate_clean.csv'))

        sinonims = {"Castelló": "Castellón / Castelló", "Bizkaia": "Vizcaya / Bizkaia",
                         "Illes Balears": "Baleares / Balears", 'Alacant': "Alicante",
           'València': "Valencia / València", "Gipuzcoa": "Guipúzcoa / Gipuzkoa", "Araba": "Álava",
                         "Girona": "Gerona / Girona", "Ourense": "Orense / Ourense",
           "A Coruña": "La Coruña / A Coruña", "Navarra": "Navarra / Nafarroa", "Lleida": "Lérida / Lleida"
                         }

        samples = casos_diarios.fecha.unique()
        graphs = []

        nodes = [graph.nodes.data()[x[0]]['nom'] for x in graph.nodes.data()]
        dict_code = {}
        for n, node in enumerate(nodes):
            node2 = node
            if node in ['Ceuta', 'Melilla']: continue
            if node in sinonims:
                node2 = sinonims[node]
            dict_code[node] = table[table['nom'] == node2]['codi'].to_list()[0]

        name2number = {graph.nodes.data()[x[0]]['nom']: x[0] for x in graph.nodes.data()}
        print("Codis de les provincies:\n\t", dict_code)
        for day in tqdm(samples, desc = 'loading graphs...'):
            graph_copia = copy.deepcopy(graph)
            casos_sampled = casos_diarios[casos_diarios['fecha'] == day]
            data_to_insert = {}
            for provincia in dict_code:
                try:
                    casos = \
                    casos_sampled[casos_sampled['provincia_iso'] == dict_code[provincia]]['num_casos'].to_list()[0]
                except:
                    casos = 0

                data_to_insert[name2number[provincia]] = casos
            data_to_insert[name2number['Ceuta']] = 0
            data_to_insert[name2number['Melilla']] = 0
            nx.set_node_attributes(graph_copia, data_to_insert, name='num_casos')

            graphs.append(graph_copia)
            self.graphs = graphs

        print(f'{len(self.graphs)} graphs loaded correctly')

    def error_checker(self, user_provided_graphs):
        if not isinstance(user_provided_graphs, list):
            raise PermissionError('Users are not permited to upload anything but lists.')

        elif not all([isinstance(g, nx.Graph) for g in user_provided_graphs]):
            raise PermissionError('Users are not permited to upload anything but graphs inside lists.')

        elif len(user_provided_graphs) != len(self.graphs):
            raise PermissionError(f'User should upload a list containing {len(self.graphs)} elements.'
                                  f'Uploaded object {type(user_provided_graphs)} contains {len(user_provided_graphs)}')

    def __call__(self, user_provided_graphs):
        return self.forward(user_provided_graphs)

    def forward(self, user_provided_graphs):
        self.error_checker(user_provided_graphs)
        allowed_error_idxs = [SINGLE_DAY_GRAPH] + list(range(len(self.graphs) - MISSING_GRAPHS, len(self.graphs)))
        errors = [0, 0, 0]

        for num, (g1, g2) in enumerate(zip(self.graphs, user_provided_graphs)):
            g1_cases = {x[0]: g1.nodes.data()[x[0]]['num_casos'] for x in g1.nodes.data()}
            g2_cases = {x[0]: g2.nodes.data()[x[0]]['num_casos'] for x in g2.nodes.data()}

            g1_cases_vector = np.array([g1_cases[key] for key in sorted(list(g1_cases))])
            g2_cases_vector = np.array([g2_cases[key] for key in sorted(list(g2_cases))])

            absolute_diff = ((g1_cases_vector - g2_cases_vector) ** 2).mean()
            if (absolute_diff != 0 and
                    not (num in allowed_error_idxs)):
                raise PermissionError(f'Found non-zero mean squared error (MSE) in index {num}, '
                                      f'predictions should be placed at idxs {allowed_error_idxs}')

            if num == SINGLE_DAY_GRAPH:
                errors[0] = absolute_diff

            elif num in allowed_error_idxs[1:6]:
                errors[1] += absolute_diff

            elif num in allowed_error_idxs[1:]:
                errors[2] += absolute_diff

        return tuple([x / z for (x, z) in zip(errors, [1, 5, 11])])

if __name__ == '__main__':

    err = ErrorChecker()
    user_graph_silly = ErrorChecker('_casos_diagnostico_provincia.csv').graphs
    user_graph_silly = user_graph_silly + user_graph_silly[:MISSING_GRAPHS]

    print(err(user_graph_silly))
-_________________[./utils/nxmanager.py CAT SCRIPT]____________

________________[./server.py CAT SCRIPT]_______________


-_________________[./server.py CAT SCRIPT]____________

